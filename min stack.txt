class MinStack:
    def __init__(self):
        self.stack = []
        self.min=sys.maxsize
    def push(self,x: int) -> None:
        self.min=min(self.min,x)
        self.stack.append([x,self.min])
    def pop(self) ->None:
        self.stack.pop()
        if (self.stack):
            self.min=self.stack[-1][1]
        else:
            self.min=sys.maxsize
    def top(self) ->int:
        return self.stack[-1][0]
    def getMin(self) ->int:
        return self.stack[-1][1]
    
// corrected code below
-------------------------
    class MinStack:

    def __init__(self):
        self.stack = []
        self.min_value = float('inf')

    def push(self, val: int) -> None:
        if val < self.min_value:
            self.min_value = val
        self.stack.append((val, self.min_value))

    def pop(self) -> None:
        if self.stack:
            self.stack.pop()
            if self.stack:
                self.min_value = self.stack[-1][1]
            else:
                self.min_value = float('inf')

    def top(self) -> int:
        if self.stack:
            return self.stack[-1][0]

    def getMin(self) -> int:
        return self.min_value